import java.text.NumberFormat;

/*	Fred Vela
	CSCD454 Capaul
	Decorator Pattern
	Summer 2013		*/

/*	This tester demonstrates the design pattern "Decorator".  In the first example: mytree
 *  the star gets added to the Blue Spruce, and a subsequent attempt to add a star to the 
 *  total cost results in the message, "Tree already has a star!"
 *  
 *  The second run, the Balsam Fir, attempts to add the star, but does not sucessfully add.
 *  The reason this doesn't add is because the Star is modeled around the "Singleton" pattern.
 *  This pattern allows for only one instance of an object to exist.  Since the Star was 
 *  added to the previous run, the Blue Spruce, the Star does not get added to the Balsam Fir.
 *  The tester shows that that the Blue Spruce gets a single star, and doesn't get another one.
 *  Regarding the second run, the Balsam Fir, the message "Tree already has a star!" populates
 *  because one and only one star can exist.
 *  
 *  Although the design pattern "Singleton" creates a single object, it was extended.  This is
 *  a slight modification to the "Singleton" pattern.  This was done to avoid type mismatches.
 *  
 */



public class TreeTester 
{
	public static void main(String[] args) 
	{
	    Tree mytree = new BlueSpruce();
		mytree = SingleStar.getInstance(mytree);
		mytree = new Ruffles(mytree);
		mytree = SingleStar.getInstance(mytree);
		mytree = new Ruffles(mytree);
		printtree(mytree);
		
		System.out.println("---------------------------------------------------------------------");		
	
		Tree mytree3 = new BalsamFir();
		mytree3 = SingleStar.getInstance(mytree3);
		mytree3 = new Lights(mytree3);
		mytree3 = new LEDs(mytree3);
		printtree(mytree3);
			
	}

	
	public static void printtree(Tree temp)
	{
		NumberFormat dollar = NumberFormat.getCurrencyInstance();
		
		System.out.println( temp.getDescription() + " costs "+ dollar.format( temp.cost() ) );
		
	}
}
